// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform mat4 ModelViewProjectionMatrix, normalMat;
uniform float shininess;
uniform vec3 ambientColor;
uniform vec3 diffuseColor;
uniform vec3 specularColor;
uniform float ambientCoefficient;   
uniform float diffuseCoefficient;   
uniform float specularCoefficient;   
uniform vec3 lightPosition;

varying vec4 color;

void main() {
    vec4 vertPos4 = ModelViewProjectionMatrix * vec4(vertex, 1.0);
    vec3 vertPos = vec3(vertPos4) / vertPos4.w;
    vec3 normalInterp = vec3(normalMat * vec4(normal, 0.0));
    gl_Position = vertPos4;

    vec3 normal = normalize(normalInterp);
    vec3 lightDirection = normalize(lightPosition);

    float nDotLight = max(dot(normal, lightDirection), 0.0);
    float specularLight = 0.0;
    if (nDotLight > 0.0) {
        vec3 viewDir = normalize(-vertPos);
        vec3 halfDir = normalize(-lightDirection + viewDir);
        float specularAngle = max(dot(halfDir, normal), 0.0);
        specularLight = pow(specularAngle, shininess);
    }

    vec3 diffuse = nDotLight * diffuseColor;
    vec3 ambient = ambientColor;
    vec3 specular = specularLight * specularColor;

    color = vec4(diffuse  + ambient  + specular, 1.0);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec4 color;
void main() {
    gl_FragColor = color;
}`;